#ifndef __RESULT_PROCESSOR_H__
#define __RESULT_PROCESSOR_H__

#include "ftMapClass.h"
#include <experimental/filesystem>
#include "utils.h"
#include "iutils.h"
#include "iresultprocessor.h"

namespace fs = std::experimental::filesystem;

namespace ft {

class ResultProcessor : public IResultProcessor {
public:
    ////////////////////////////////////////////////////////////////////////
    /// \brief ResultProcessor
    ////////////////////////////////////////////////////////////////////////
    ResultProcessor();

    ////////////////////////////////////////////////////////////////////////
    /// \brief ~ResultProcessor
    ////////////////////////////////////////////////////////////////////////
    virtual ~ResultProcessor();

    ////////////////////////////////////////////////////////////////////////
    /// \brief ResultProcessor::getIndexCounts
    /// \param readIDResults
    /// \return
    ////////////////////////////////////////////////////////////////////////
    //void getIndexCounts(std::set<ft::KmerClass> readIDResults);

    ////////////////////////////////////////////////////////////////////////
    /// \brief ResultProcessor::processIndexPos
    /// \param indexPosResults
    /// \param ignore_multi_hits
    /// \param readLen
    /// \return
    ////////////////////////////////////////////////////////////////////////
    std::set<ft::QueryClass> processIndexPos(std::set<ft::KmerClass>& indexPosResults, uint readLen);

    ////////////////////////////////////////////////////////////////////////
    /// \brief ResultProcessor::processResults
    /// \param indexPosResults
    /// \param indexMapFile
    /// \param extract_matching_reads
    /// \param ignore_multi_hits
    /// \param readLen
    /// \return
    ////////////////////////////////////////////////////////////////////////
    void processResults(ft::FTMap& ftMap);

    ////////////////////////////////////////////////////////////////////////
    /// \brief overrideUtils
    /// \param utils
    ////////////////////////////////////////////////////////////////////////
    void overrideUtils(std::shared_ptr<IUtils> utils);


private:
    ////////////////////////////////////////////////////////////////////////
    /// \brief _utils
    ////////////////////////////////////////////////////////////////////////
    Utils _ownedUtils;

    ////////////////////////////////////////////////////////////////////////
    /// \brief _utils
    ////////////////////////////////////////////////////////////////////////
    IUtils* _utils;

};
}

#endif // end of class
