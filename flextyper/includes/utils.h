///////////////////////////////////////////////////////////////////////////
/// \copyright Copyright (c) 2019, Wasserman lab
/// \brief This file contains the declaration of utils.h, it contains
///             all utility functions needed to perform fast typer searches
///////////////////////////////////////////////////////////////////////////

#ifndef __UTILS_H__
#define __UTILS_H__

#include <vector>
#include <string>
#include <experimental/filesystem>
#include <set>
#include "FTMapClass.h"
#include <cmath>
#include "iutils.h"

namespace fs = std::experimental::filesystem;

namespace ft {


class Utils : public IUtils {
public:
    ////////////////////////////////////////////////////////////////////////
    /// \brief Utils constructor
    ////////////////////////////////////////////////////////////////////////
    Utils();

    ////////////////////////////////////////////////////////////////////////
    /// \brief Utils destructor
    ////////////////////////////////////////////////////////////////////////
    virtual ~Utils();

public:
    ////////////////////////////////////////////////////////////////////////
    /// \brief  join
    /// \param  setOfStr
    /// \param  delimeter
    ////////////////////////////////////////////////////////////////////////
    std::string joinString(const std::set<std::string>& setOfStr, std::string delimeter = ", ");

    ////////////////////////////////////////////////////////////////////////
    /// \brief  split
    /// \param  strToSplit
    /// \param  delimeter
    /// \return returns tokens obtained from the given string
    ////////////////////////////////////////////////////////////////////////
    std::vector<std::string> split(const std::string& strToSplit, char delimeter);

    ////////////////////////////////////////////////////////////////////////
    /// \brief  getSetOfIndicies
    /// \param  indexList Filename
    /// \return returns a set of paths corresponding to indexes
    ////////////////////////////////////////////////////////////////////////
    std::set<fs::path> getSetOfIndexes(const fs::path& indexList = "indices.txt");

    ////////////////////////////////////////////////////////////////////////
    /// \brief  convertIndexPositionsToReadIDs
    /// \param  indexPos
    /// \param  readLength
    /// \return returns a set of ReadID's corresponding to Index Positions
    ////////////////////////////////////////////////////////////////////////
    std::set<size_t> convertIndexPositionsToReadIDs(std::set<long long> indexPositions, uint readLength);

    ////////////////////////////////////////////////////////////////////////
    /// \brief  convertReadIDsToReadNames
    /// \param  indexMapFile
    /// \param  readIDs
    /// \return
    ////////////////////////////////////////////////////////////////////////
    std::set<std::string> convertReadIDsToReadNames(const fs::path& indexMapFile, std::set<size_t> readIDs);

    ////////////////////////////////////////////////////////////////////////
    /// \brief  FTSearch::reverseComplement
    /// \param  inputString
    /// \return returns the reverse complement sequence
    ////////////////////////////////////////////////////////////////////////
    std::string reverseComplement(const std::string& inputString) const;

    ////////////////////////////////////////////////////////////////////////
    /// \brief Utils::fileIndexToQueryIndex
    /// \param fileIndex
    /// \return
    ////////////////////////////////////////////////////////////////////////
    int fileIndexToQueryIndex(uint fileIndex);

    ////////////////////////////////////////////////////////////////////////
    /// \brief trimmedReadFileName
    /// \param p
    /// \return
    ////////////////////////////////////////////////////////////////////////
    std::string trimmedReadFileName(const fs::path& p);

    ////////////////////////////////////////////////////////////////////////
    /// \brief queryIndexToFileIndex
    /// \param queryIndex
    /// \return
    ////////////////////////////////////////////////////////////////////////
    uint queryIndexToFileIndex(int queryIndex);
};
}

#endif // end of Utils
