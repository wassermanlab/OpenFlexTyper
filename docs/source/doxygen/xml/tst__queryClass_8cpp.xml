<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tst__queryClass_8cpp" kind="file" language="C++">
    <compoundname>tst_queryClass.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">climits</includes>
    <includes refid="queryClass_8cpp" local="yes">queryClass.cpp</includes>
    <incdepgraph>
      <node id="902">
        <label>/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_queryClass.cpp</label>
        <link refid="tst__queryClass_8cpp"/>
        <childnode refid="903" relation="include">
        </childnode>
        <childnode refid="904" relation="include">
        </childnode>
      </node>
      <node id="903">
        <label>gtest/gtest.h</label>
      </node>
      <node id="904">
        <label>climits</label>
      </node>
    </incdepgraph>
    <innerclass refid="classft_1_1TestQueryClass" prot="public">ft::TestQueryClass</innerclass>
    <innernamespace refid="namespaceft">ft</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="tst__queryClass_8cpp_1a940ad85d9d45ed5e3cb30708b4add8c5" prot="public" static="no">
        <name>TEST_DESCRIPTION</name>
        <param><defname>desc</defname></param>
        <initializer>RecordProperty(&quot;description&quot;, desc)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_queryClass.cpp" line="21" column="9" bodyfile="/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_queryClass.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;queryClass.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceft" kindref="compound">ft</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestQueryClass<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_DESCRIPTION(desc)<sp/>RecordProperty(&quot;description&quot;,<sp/>desc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">TEST_F(TestQueryClass,<sp/>getQFlags)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;get<sp/>QFlags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;ft::FlagType,<sp/>std::set&lt;std::string&gt;&gt;<sp/>getQFlags()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">TEST_F(TestQueryClass,<sp/>getQIdT)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;get<sp/>QIdT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ft::QIdT<sp/>getQIdT()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref><sp/>testQuery(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>testQuery.getQIdT().first);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(ft::QueryType::REF,<sp/>testQuery.getQIdT().second);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">TEST_F(TestQueryClass,<sp/>getFlagKmers)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;get<sp/>Flag<sp/>Kmers<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>std::set&lt;std::string&gt;<sp/>getFlagKmers(const<sp/>ft::FlagType<sp/>flag)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_qFlags[FlagType::NUK]={</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AATT&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AATT&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>output<sp/>=<sp/>testQuery-&gt;getFlagKmers(FlagType::NUK);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>output2<sp/>=<sp/>testQuery-&gt;getFlagKmers(FlagType::OCK);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>expected2<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected,<sp/>output);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(output2,<sp/>expected2);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">TEST_F(TestQueryClass,<sp/>setFlags)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;set<sp/>Flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>setFlags(const<sp/>std::map&lt;ft::FlagType,<sp/>std::set&lt;std::string&gt;&gt;&amp;<sp/>qFlags);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;ft::FlagType,<sp/>std::set&lt;std::string&gt;&gt;<sp/>flags;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[FlagType::NUK]={</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AATT&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AATT&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;setFlags(flags);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(testQuery-&gt;getFlagKmers(FlagType::NUK),expected);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">TEST_F(TestQueryClass,<sp/>addFlag)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;add<sp/>Flag<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>addFlag(const<sp/>ft::FlagType&amp;<sp/>flagType,<sp/>const<sp/>std::string&amp;<sp/>kmers);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>kmer<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;addFlag(FlagType::NUK,<sp/>kmer);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>testQuery-&gt;_qFlags.size());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasKmerFlag(FlagType::NUK,<sp/>kmer));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">TEST_F(TestQueryClass,<sp/>removeFlag)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;remove<sp/>Flag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>removeFlag(ft::FlagType<sp/>flagType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_qFlags[FlagType::NUK]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_qFlags[FlagType::OCK]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>testQuery-&gt;_qFlags.size());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;removeFlag(FlagType::OCK);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>testQuery-&gt;_qFlags.size());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;removeFlag(FlagType::NUK);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>testQuery-&gt;_qFlags.size());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">TEST_F(TestQueryClass,<sp/>removeKmerFlag)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;remove<sp/>Kmer<sp/>Flag<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>removeKmerFlag(const<sp/>ft::FlagType&amp;<sp/>flagTyper,<sp/>const<sp/>std::string&amp;<sp/>kmers);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_qFlags[FlagType::NUK]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_qFlags[FlagType::OCK]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>testQuery-&gt;_qFlags[FlagType::NUK].size());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>testQuery-&gt;_qFlags[FlagType::OCK].size());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;removeKmerFlag(FlagType::OCK,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>testQuery-&gt;_qFlags[FlagType::NUK].size());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>testQuery-&gt;_qFlags[FlagType::OCK].size());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasKmerFlag(FlagType::NUK,<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasKmerFlag(FlagType::OCK,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">TEST_F(TestQueryClass,<sp/>removeCount)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;remove<sp/>Count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>removeCount();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;setCount(20);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(20,<sp/>testQuery-&gt;_count);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;removeCount();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>testQuery-&gt;_count);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">TEST_F(TestQueryClass,<sp/>isQIdTEqual)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;is<sp/>QIdT<sp/>Equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>isQIdTEqual(const<sp/>ft::QIdT&amp;<sp/>test)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::QIdT<sp/>trueqidt<sp/>=<sp/>std::make_pair(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::QIdT<sp/>falseqidt1<sp/>=<sp/>std::make_pair(1,<sp/>ft::QueryType::ALT);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::QIdT<sp/>falseqidt2<sp/>=<sp/>std::make_pair(2,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;isQIdTEqual(trueqidt));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;isQIdTEqual(falseqidt1));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;isQIdTEqual(falseqidt2));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">TEST_F(TestQueryClass,<sp/>hasQueryID)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;has<sp/>Query<sp/>ID<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>hasQueryID(const<sp/>int&amp;<sp/>qid)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasQueryID(1));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasQueryID(2));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">TEST_F(TestQueryClass,<sp/>hasQueryType)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;has<sp/>Query<sp/>Type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>hasQueryType(const<sp/>ft::QueryType&amp;<sp/>qType)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasQueryType(ft::QueryType::REF));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasQueryType(ft::QueryType::ALT));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">TEST_F(TestQueryClass,<sp/>hasKmerFlag)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;has<sp/>Kme<sp/>rFlag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>hasKmerFlag(const<sp/>ft::FlagType&amp;<sp/>flag,<sp/>const<sp/>std::string&amp;<sp/>kmer)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_qFlags[FlagType::NUK]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasKmerFlag(ft::FlagType::NUK,<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasKmerFlag(ft::FlagType::NUK,<sp/></highlight><highlight class="stringliteral">&quot;CCCC&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasKmerFlag(ft::FlagType::OCK,<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//wrong<sp/>flag<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testQuery-&gt;hasKmerFlag(ft::FlagType::NUK,<sp/></highlight><highlight class="stringliteral">&quot;TTTT&quot;</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//kmer<sp/>doesnt<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">TEST_F(TestQueryClass,<sp/>hasNonZeroCount)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;has<sp/>Non<sp/>Zero<sp/>Count<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>hasNonZeroCount()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>testQuery-&gt;_count<sp/>=32;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testQuery-&gt;hasNonZeroCount());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">TEST_F(TestQueryClass,<sp/>OverloadOperators)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;Test<sp/>the<sp/>overload<sp/>operators<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery2Ref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(2,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery1Ref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::REF);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>*<sp/>testQuery1Alt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classft_1_1QueryClass" kindref="compound">ft::QueryClass</ref>(1,<sp/>ft::QueryType::ALT);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(*testQuery1Alt<sp/>&lt;<sp/>*testQuery2Ref);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(*testQuery1Ref<sp/>&lt;<sp/>*testQuery1Alt);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(*testQuery2Ref<sp/>==<sp/>*testQuery2Ref);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(*testQuery1Ref<sp/>==<sp/>*testQuery1Alt);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(*testQuery2Ref<sp/>&lt;<sp/>*testQuery1Alt);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_queryClass.cpp"/>
  </compounddef>
</doxygen>
