<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tst__kmerClass_8cpp" kind="file" language="C++">
    <compoundname>tst_kmerClass.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">climits</includes>
    <includes refid="kmerClass_8cpp" local="yes">kmerClass.cpp</includes>
    <incdepgraph>
      <node id="851">
        <label>/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_kmerClass.cpp</label>
        <link refid="tst__kmerClass_8cpp"/>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
      </node>
      <node id="852">
        <label>gtest/gtest.h</label>
      </node>
      <node id="853">
        <label>climits</label>
      </node>
    </incdepgraph>
    <innerclass refid="classft_1_1TestKmerClass" prot="public">ft::TestKmerClass</innerclass>
    <innernamespace refid="namespaceft">ft</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="tst__kmerClass_8cpp_1a940ad85d9d45ed5e3cb30708b4add8c5" prot="public" static="no">
        <name>TEST_DESCRIPTION</name>
        <param><defname>desc</defname></param>
        <initializer>RecordProperty(&quot;description&quot;, desc)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_kmerClass.cpp" line="15" column="9" bodyfile="/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_kmerClass.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;kmerClass.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceft" kindref="compound">ft</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestKmerClass<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()<sp/>{}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()<sp/>{}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_DESCRIPTION(desc)<sp/>RecordProperty(&quot;description&quot;,<sp/>desc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">TEST_F(TestKmerClass,<sp/>getKmer)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;get<sp/>Kmer<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>kmer<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass<sp/>testKmerClass(kmer);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>resultkmer<sp/>=<sp/>testKmerClass.getKmer();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(resultkmer,<sp/>kmer);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">TEST_F(TestKmerClass,<sp/>setKPos)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;get<sp/>Kmer<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>KmerClass::setKPositions(const<sp/>std::set&lt;long<sp/>long&gt;&amp;<sp/>kPositions,<sp/>uint<sp/>offset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>kmer<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass<sp/>testKmerClass(kmer);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>resultkmer<sp/>=<sp/>testKmerClass.getKmer();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(resultkmer,<sp/>kmer);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">TEST_F(TestKmerClass,<sp/>KFlag)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;Add<sp/>single<sp/>flag<sp/>to<sp/>kmer<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;no<sp/>flags&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;set<sp/>NUK<sp/>flag&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setKFlags({FlagType::NUK});</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;add<sp/>Flag&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;addKFlag(FlagType::OCK);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasFlag(FlagType::ABK));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;remove<sp/>flag&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;removeKFlag(FlagType::NUK);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasFlag(FlagType::NUK));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasFlag(FlagType::OCK));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">TEST_F(TestKmerClass,<sp/>KPosition)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;Add<sp/>single<sp/>position<sp/>to<sp/>kmer<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setKPositions({1000,<sp/>2340});</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasKPosition(1000));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasKPosition(666));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;addKPosition(666);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasKPosition(666));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasKPosition(924357));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;removeKPosition(2340);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasKPosition(2340));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasKPosition(1000));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasKPosition(666));</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">TEST_F(TestKmerClass,<sp/><sp/>ReadID)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;add<sp/>and<sp/>remove<sp/>single<sp/>Read<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>read1<sp/>=<sp/>{1000,<sp/>1};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>read2<sp/>=<sp/>{2340,<sp/>1};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>read3<sp/>=<sp/>{666,<sp/>1};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>read4<sp/>=<sp/>{924357,<sp/>1};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>read5<sp/>=<sp/>{1000,<sp/>2};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setReadIDs({read1,<sp/>read2});</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read1));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read3));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read5));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;addReadID(read3);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read3));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read4));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read5));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;removeReadID(read2);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read2));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read1));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read3));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;addReadID(read5);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read1));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read2));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read5));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;removeReadID(read5);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(read1));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read2));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(read5));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">TEST_F(TestKmerClass,<sp/>hasKmer)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;see<sp/>if<sp/>a<sp/>kmer<sp/>class<sp/>has<sp/>the<sp/>same<sp/>kmer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasKmer(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasKmer(</highlight><highlight class="stringliteral">&quot;AAA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasKmer(</highlight><highlight class="stringliteral">&quot;TTTT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">TEST_F(TestKmerClass,<sp/>isKmerEqual)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;see<sp/>if<sp/>a<sp/>kmer<sp/>class<sp/>has<sp/>a<sp/>specific<sp/>kmer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>goodTestKmer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>badTestKmer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>badTestKmer2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;TTTT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;isKmerEqual(*goodTestKmer));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;isKmerEqual(*badTestKmer));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;isKmerEqual(*badTestKmer2));</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">TEST_F(TestKmerClass,<sp/>convertPosToRead_NotPaired_NotReverseComp)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;convert<sp/>index<sp/>positions<sp/>to<sp/>read<sp/>ids<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setKPositions({50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723});</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;convertPosToReadID(100,8,</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ft::ReadID&gt;<sp/>expectedReadIDs<sp/>=<sp/>{{1,1},<sp/>{2,1},<sp/>{3,<sp/>1},<sp/>{4,<sp/>1},<sp/>{5,<sp/>1},<sp/>{6,<sp/>1},<sp/>{7,<sp/>1},<sp/>{8,<sp/>1}};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expectedReadIDs,<sp/>testKmerClass-&gt;getReadIDs());</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">TEST_F(TestKmerClass,<sp/>sdotest)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;convert<sp/>index<sp/>positions<sp/>to<sp/>read<sp/>ids<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>ft::KmerClass&gt;<sp/>indexResults;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass<sp/>tmpResult<sp/>=<sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>resultkmer<sp/>=<sp/>tmpResult.getKmer();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>indexResults[resultkmer]<sp/>=<sp/>tmpResult;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass<sp/>result<sp/>=<sp/>indexResults.find(resultkmer)-&gt;second;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>result.setKPositions({50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723});</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>indexResults.find(resultkmer)-&gt;second<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass<sp/>result2<sp/>=<sp/>indexResults.find(resultkmer)-&gt;second;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/>:<sp/>{50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723})</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//result.addKPosition(pos,<sp/>offset);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rc2<sp/>=<sp/>result2.hasKPosition(pos);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>result.hasKPosition(pos);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rc<sp/>!=<sp/>rc2)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>pos<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pos<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>result<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>result2<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rc2<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sdotest<sp/>done<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">TEST_F(TestKmerClass,<sp/>convertPosToReadDirect)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;convert<sp/>index<sp/>positions<sp/>to<sp/>read<sp/>ids<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass<sp/>testKmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass.setKPositions({50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723});</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass.convertPosToReadID(100,8,</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ft::ReadID&gt;<sp/>expectedReadIDs<sp/>=<sp/>{{1,1},<sp/>{2,1},<sp/>{3,<sp/>1},<sp/>{4,<sp/>1},<sp/>{5,<sp/>1},<sp/>{6,<sp/>1},<sp/>{7,<sp/>1},<sp/>{8,<sp/>1}};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expectedReadIDs,<sp/>testKmerClass.getReadIDs());</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">TEST_F(TestKmerClass,<sp/>convertPosToRead_Paired_NotReverseComp)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;convert<sp/>index<sp/>positions<sp/>to<sp/>read<sp/>ids<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setKPositions({50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723});</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;convertPosToReadID(100,8,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ft::ReadID&gt;<sp/>expectedReadIDs<sp/>=<sp/>{{1,1},<sp/>{2,1},<sp/>{3,<sp/>1},<sp/>{4,<sp/>1},<sp/>{1,2},<sp/>{2,2},<sp/>{3,<sp/>2},<sp/>{4,<sp/>2}};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expectedReadIDs,<sp/>testKmerClass-&gt;getReadIDs());</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">TEST_F(TestKmerClass,<sp/>convertPosToRead_NotPaired_ReverseComp)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;convert<sp/>index<sp/>positions<sp/>to<sp/>read<sp/>ids<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setKPositions({50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723});</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;convertPosToReadID(100,4,</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ft::ReadID&gt;<sp/>expectedReadIDs<sp/>=<sp/>{{1,1},<sp/>{2,1},<sp/>{3,<sp/>1},<sp/>{4,<sp/>1}};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expectedReadIDs,<sp/>testKmerClass-&gt;getReadIDs());</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">TEST_F(TestKmerClass,<sp/>convertPosToRead_Paired_ReverseComp)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;convert<sp/>index<sp/>positions<sp/>to<sp/>read<sp/>ids<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setKPositions({50,<sp/>125,<sp/>251,<sp/>313,<sp/>449,<sp/>555,<sp/>654,<sp/>723});</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;convertPosToReadID(100,4,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ft::ReadID&gt;<sp/>expectedReadIDs<sp/>=<sp/>{{1,1},<sp/>{2,1},<sp/>{1,2},<sp/>{2,2}};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expectedReadIDs,<sp/>testKmerClass-&gt;getReadIDs());</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">TEST_F(TestKmerClass,<sp/>matchingReadID)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;check<sp/>if<sp/>readids<sp/>match<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>a<sp/>=<sp/>{1,1};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>b<sp/>=<sp/>{1,2};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>c<sp/>=<sp/>{2,1};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>d<sp/>=<sp/>{2,2};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>e<sp/>=<sp/>{1,1};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>f<sp/>=<sp/>{1,2};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;matchingReadID(a,e));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;matchingReadID(b,f));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;matchingReadID(a,b));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;matchingReadID(a,c));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;matchingReadID(a,d));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">TEST_F(TestKmerClass,<sp/>hasReadID)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;check<sp/>if<sp/>Kmer<sp/>has<sp/>ReadID<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>a<sp/>=<sp/>{1,1};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>b<sp/>=<sp/>{1,2};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>c<sp/>=<sp/>{2,1};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>d<sp/>=<sp/>{1,3};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>e<sp/>=<sp/>{3,1};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::ReadID<sp/>f<sp/>=<sp/>{3,3};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ft::ReadID&gt;<sp/>readIDs<sp/>=<sp/>{{1,1},<sp/>{2,1},<sp/>{1,2},<sp/>{2,2}};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>testKmerClass-&gt;setReadIDs(readIDs);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(a));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(b));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(testKmerClass-&gt;hasReadID(c));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(d));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(e));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(testKmerClass-&gt;hasReadID(f));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">TEST_F(TestKmerClass,<sp/>testOverloadOperator)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_DESCRIPTION(</highlight><highlight class="stringliteral">&quot;check<sp/>the<sp/>overload<sp/>operator<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>higherKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;ATTT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>equalKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AATT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>testKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AATT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ft::KmerClass*<sp/>lowerKmerClass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ft::KmerClass(</highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(*lowerKmerClass<sp/>&lt;<sp/>*testKmerClass);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(*testKmerClass<sp/>&lt;<sp/>*higherKmerClass);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(*equalKmerClass<sp/>==<sp/>*testKmerClass);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tixii/Git/OpenFlexTyper/flextyper/test/tst_kmerClass.cpp"/>
  </compounddef>
</doxygen>
